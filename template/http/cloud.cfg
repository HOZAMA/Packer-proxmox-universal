# The top level settings are used as module
# and system configuration.

# A set of users which may be applied and/or used by various modules
# when a 'default' entry is found it will reference the 'default_user'
# from the distro configuration specified below
users:
   - default

# If this is set, 'root' will not be able to ssh in and they 
# will get a message to login instead as the above $user (debian)
disable_root: true

# This will cause the set+update hostname module to not operate (if true)
preserve_hostname: false

# This prevents cloud-init from rewriting apt's sources.list file,
# which has been a source of surprise.
apt_preserve_sources_list: true

# Example datasource config
# datasource: 
#    Ec2: 
#      metadata_urls: [ 'blah.com' ]
#      timeout: 5 # (defaults to 50 seconds)
#      max_wait: 10 # (defaults to 120 seconds)

# The modules that run in the 'init' stage
cloud_init_modules:
 - migrator
 - seed_random
 - bootcmd
 - write-files
 - growpart
 - resizefs
 - disk_setup
 - mounts
 - set_hostname
 - update_hostname
 - update_etc_hosts
 - ca-certs
 - rsyslog
 - users-groups
 - ssh

# The modules that run in the 'config' stage
cloud_config_modules:
# Emit the cloud config ready event
# this can be used by upstart jobs for 'start on cloud-config'.
 - emit_upstart
 - ssh-import-id
 - locale
 - set-passwords
 - grub-dpkg
 - apt-pipelining
 - apt-configure
 - ntp
 - timezone
 - disable-ec2-metadata
 - runcmd
 - byobu

# The modules that run in the 'final' stage
cloud_final_modules:
 - package-update-upgrade-install
 - fan
 - mcollective
 - rightscale_userdata
 - scripts-vendor
 - scripts-per-once
 - scripts-per-boot
 - scripts-per-instance
 - scripts-user
 - ssh-authkey-fingerprints
 - keys-to-console
 - final-message
 - power-state-change

# System and/or distro specific settings
# (not accessible to handlers/transforms)
system_info:
   # This will affect which distro class gets used
   # Default user name + that default users groups (if added/used)
   default_user:
     name: User_name ###########################CHECK
     lock_passwd: False
     groups: [adm, sudo]
     sudo: ["ALL=(ALL) NOPASSWD:ALL"]
     shell: /bin/bash
   # Other config here will be given to the distro class and/or path classes
   paths:
      cloud_dir: /var/lib/cloud/
      templates_dir: /etc/cloud/templates/
      upstart_dir: /etc/init/
timezone: Europe/Moscow

write_files:
  - content: |
      #!/bin/bash
      # Обновляем базу данных LVM
      vgchange -ay
      # Получаем необходимые переменные
      root_device=$(mount | awk '$3 == "/" { print $1 }')
      root_device_name=$(echo $root_device | awk -F"/" '{print $NF}')
      root_lv=$(lvs | grep root| awk '{print $1}')
      root_vg_search=$(echo $root_device_name | awk -F"-" '{print $1}')
      root_vg=$(vgs | grep $root_vg_search| awk '{print $1}')
      root_pvs=$(pvs |grep $root_vg| awk '{print $1}')
      root_pvs_metka=$(echo $root_pvs |sed 's/[^0-9]*//g')
      metka=$(lsblk -nro NAME,TYPE | awk '$2=="disk"&&!a[$1]++{print $1;exit}')
      root_extended=$(fdisk -l | grep Extended | awk '{print $1}'|sed 's/[^0-9]*//g')
      #Расширение PVS
      if [[ $(lsb_release -is) == "Debian" ]]; then
      growpart /dev/$metka $root_extended
      fi
      growpart /dev/$metka $root_pvs_metka
      pvresize $root_pvs
      # Получаем размер свободного места на диске
      free_space=$(vgdisplay | awk '/Free/ {print $5}')
      # Проверяем, достаточно ли свободного места на диске для расширения root
      if [ "$root_size" = "$(echo -e "$root_size\n$free_space" | sort -h | head -n1)" ]; then
        echo "Недостаточно места на диске для расширения root.Проблема в расширении PVS"
        exit 1
      fi
      # Расширяем LVM и FS
      lvextend -r -l +100%FREE /dev/$root_vg/$root_lv
      root_device_size=$(lsblk -no size $root_device)
      echo "LVM успешно расширен." $root_device_size
    path: /tmp/resize-lvm
    permissions: '0755'
    owner: root:root

runcmd:
   - bash /tmp/resize-lvm